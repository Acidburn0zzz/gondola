##################### raft

raft {
  # The leader sends a heartbeat at this interval (ms)
  heartbeat_period = 250

  # A follower will become a candidate if it has not received a heartbeat within this period (ms)
  election_timeout = 2000

  # A leader will become a candidate if it has not heard from floor(N/2) followers,
  # where N is the number of nodes in the cluster (ms)
  leader_timeout = 10000

  # A candidate will send out a request vote within this period.
  # The actual value is a random value in [0, this value]. (ms)
  request_vote_period = 300

  command_max_size = 1000

  # Write empty command after leader election for force any previous commands to be committed. Dynamic.
  write_empty_command_after_election = true
}

##################### gondola

gondola {
  # All the configs in this file are reloaded with this interval (ms).
  # Some of the configs are dynamic which means the new value will take effect immediately.
  config_reload_period = 10000

  # Warning messages are displayed when the number of created command objects exceed this size
  command_pool_warn_threshold = 1000

  # The command queue holds commands awaiting to be assigned a raft index
  command_queue_size = 200

  # Warning messages are displayed if the number of created messages exceed this size
  message_pool_warn_threshold = 1000

  # The incoming queue can hold this many messages before blocking
  incoming_queue_size = 100

  # Commands are no longer processed while the wait queue is longer than this value
  wait_queue_throttle_size = 100

  # If true, commands are batched into a single message when there are multiple commands
  # in the command queue. Dynamic.
  batching = true

  # The directory in which to create file locks to prevent multiple copies of a member from running
  file_lock_dir = "/tmp"

  # If a leader notices that the slave has been down for this timeout, it will delete the slave (ms)
  slave_inactivity_timeout = 60000

  # Set to true to minimize logging noise. During suppression, for some known and noisy exceptions
  # (e.g. connect retry failed), only the message is displayed and the stack trace is suppressed.
  # Also when suppression is enabled, some known and noisy exceptions are only printed once a minute,
  # along with the number of times the message was suppressed within the minute.
  stack_trace_suppression = true

  tracing {
    # Gondola prints out details of it's internal queues and pools at the specified period (ms)
    # Dynamic.
    summary_period = 5000

    # If true, all raft messages except heartbeats are printed. Dynamic.
    raft_messages = true

    # If true and raft_messages is true, heartbeats are also printed. Dynamic.
    raft_heartbeats = true

    # If true, shows all command activity. Dynamic.
    command = false

    # If true, shows all storage activity. Dynamic.
    storage = false

    # If true, bytes sent and received are printed. Dynamic.
    network = false

    # If true, the message leak detector is enabled. Any messages that are not checked in and lost,
    # are printed. Dynamic.
    message_leak = false
  }
}

##################### storage

storage {
  impl = storage.h2

  # The number of threads used to write into the log concurrently
  # Changing this value at runtime has no effect.
  save_queue_workers = 5

  h2 {
    class = com.yahoo.gondola.impl.H2dbStorage

    # Embedded mode
    url = "jdbc:h2:/tmp/gondola-db-$hostId"

    # Server mode
    #url = "jdbc:h2:tcp://localhost/~/test"

    user = sa
    password = ""
    port = 9092
    type = h2
  }
}

##################### network

network {
  impl = network.socket

  # A channel will be discarded if after sending a message and there is no response for this period. (ms)
  channel_inactivity_timeout = 10000

  socket {
    class = com.yahoo.gondola.impl.SocketNetwork

    # When a connection to a remote member is not valid, this is the period at which a reconnect is attempted. (ms)
    create_socket_retry_period = 1000

    # Timeouts for socket connects
    connect_timeout = 60000
  }

  memory {
    class = com.yahoo.gondola.impl.MemoryNetwork
  }
}

##################### clock

clock {
  impl = clock.system

  system {
    class = com.yahoo.gondola.impl.SystemClock
  }
}

##################### gondola command

tracing {
  cli {
    # Enables tracing in GondolaAgent. Dynamic.
    agent = false

    # Enables tracing in GondolaCommand. Dynamic.
    command = false
  }
}
